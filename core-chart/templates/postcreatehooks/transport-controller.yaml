{{- if .Values.InstallPCHs }}
apiVersion: tenancy.kflex.kubestellar.org/v1alpha1
kind: PostCreateHook
metadata:
  name: transport-controller
  labels:
    kflex.kubestellar.io/cptype: wds
spec:
  templates:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: "{{"{{.ControlPlaneName}}-transport-controller"}}"
    rules:
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - tenancy.kflex.kubestellar.org
      resources:
      - controlplanes
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - tenancy.kflex.kubestellar.org
      resources:
      - controlplanes/status
      verbs:
      - get
      - patch
      - update
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: "{{"{{.ControlPlaneName}}"}}-transport-controller"
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: "{{"{{.ControlPlaneName}}"}}-transport-controller"
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: "{{"{{.Namespace}}"}}"
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: transport-controller-config
    data: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: transport-controller
    spec:
      replicas: 1
      selector:
        matchLabels:
          name: transport-controller
      template:
        metadata:
          labels:
            name: transport-controller
        spec:
          initContainers:
          - name: wait-for-wds-controlplane
            image: quay.io/kubestellar/kubectl:{{.Values.KUBECTL_VERSION}}
            imagePullPolicy: IfNotPresent
            command: ["kubectl", "wait", "--for=condition=Ready", "controlplane/{{.ControlPlaneName}}", "--timeout=5m"]
          - name: setup-wds-kubeconfig
            image: quay.io/kubestellar/kubectl:{{.Values.KUBESTELLAR_VERSION}}
            imagePullPolicy: IfNotPresent
            command: ["sh", "-c", "kubectl get secret $(kubectl get controlplane {{.ControlPlaneName}} -o=jsonpath='{.status.secretRef.name}') -n $(kubectl get controlplane {{.ControlPlaneName}} -o=jsonpath='{.status.secretRef.namespace}') -o=jsonpath='{.data.$(kubectl get controlplane {{.ControlPlaneName}} -o=jsonpath='{.status.secretRef.inClusterKey}')}' | base64 -d > /mnt/shared/wds-kubeconfig"]
            volumeMounts:
            - name: shared-volume
              mountPath: /mnt/shared
          - name: wait-for-its-controlplane
            image: quay.io/kubestellar/kubectl:{{.Values.KUBECTL_VERSION}}
            imagePullPolicy: IfNotPresent
            command: ["kubectl", "wait", "--for=condition=Ready", "controlplane/{{.ITSName}}", "--timeout=5m"]
            {{- if not .ITSName }}
            # If ITSName is not provided, this init container should not run
            # This is a workaround as `kubectl wait` does not support conditional execution
            # The command will fail if ITSName is empty, but the pod will eventually start
            # if the transport controller does not require ITS.
            # A better solution would be to use a custom init container that checks for ITSName
            # before attempting to wait.
            command: ["sh", "-c", "if [ -z "{{.ITSName}}" ]; then exit 0; else kubectl wait --for=condition=Ready controlplane/{{.ITSName}} --timeout=5m; fi"]
            {{- end }}
          - name: setup-its-kubeconfig
            image: quay.io/kubestellar/kubectl:{{.Values.KUBECTL_VERSION}}
            imagePullPolicy: IfNotPresent
            command: ["sh", "-c", "kubectl get secret $(kubectl get controlplane {{.ITSName}} -o=jsonpath='{.status.secretRef.name}') -n $(kubectl get controlplane {{.ITSName}} -o=jsonpath='{.status.secretRef.namespace}') -o=jsonpath='{.data.$(kubectl get controlplane {{.ITSName}} -o=jsonpath='{.status.secretRef.inClusterKey}')}' | base64 -d > /mnt/shared/transport-kubeconfig"]
            volumeMounts:
            - name: shared-volume
              mountPath: /mnt/shared
          containers:
          - name: transport-controller
            image: ghcr.io/kubestellar/kubestellar/ocm-transport-controller:{{ .Values.TRANSPORT_VERSION | default .Values.KUBESTELLAR_VERSION }}
            imagePullPolicy: IfNotPresent
            args:
            - --metrics-bind-address={{.Values.transport_controller.metrics_bind_addr}}
            - --pprof-bind-address={{.Values.transport_controller.pprof_bind_addr}}
            - --transport-kubeconfig=/mnt/shared/transport-kubeconfig
            - --transport-qps={{.Values.transport_controller.transport_qps}}
            - --transport-burst={{.Values.transport_controller.transport_burst}}
            - --wds-kubeconfig=/mnt/shared/wds-kubeconfig
            - --wds-name={{"{{.ControlPlaneName}}"}}
            - --wds-qps={{.Values.transport_controller.wds_qps}}
            - --wds-burst={{.Values.transport_controller.wds_burst}}
            - -v={{.Values.verbosity.transport | default .Values.verbosity.default | default 4 }}
            - --max-num-wrapped={{.Values.transport_controller.max_num_wrapped}}
            - --max-size-wrapped={{.Values.transport_controller.max_size_wrapped}}
            volumeMounts:
            - name: shared-volume
              mountPath: /mnt/shared
              readOnly: true
          volumes:
          - name: shared-volume
            emptyDir: {}
{{- end }} 